#!/bin/sh

# Function to convert dBm to percentage.
# Note:
# -30 dBm is an excellent signal (100% signal strength)
# -90 dBm is the minimum usable signal (0% signal strength).
# Parameters:
# $1: Singal strength in dBm.
convert_dbm_to_percent() {
	local dbm=$1
	local percent=$(( ($dbm + 100) * 100 / 60 ))
	# Ensure the percentage is capped at 100% and at least 0%.
	if [ "$percent" -gt 100 ]; then
		percent=100
	elif [ "$percent" -lt 0 ]; then
		percent=0
	fi
	echo $percent
}

# Function for displaying the spinning wheel animation for a specified duration.
# Parameters:
# $1: Minimum number of seconds to show the animation.
show_spinning_wheel() {
	local min_seconds=$1
	local elapsed=0
	local start_time=$(date +%s)	# Using +%s for simplicity.

	# Spinner for a fluid animation.
	local spinner='|/-\\'
	local spinner_length=$(printf "%s" "$spinner" | wc -m)

	while [ "$elapsed" -lt "$min_seconds" ]; do
		local current_time=$(date +%s)
		elapsed=$((current_time - start_time))

		for i in $(seq 1 $spinner_length); do
			local char=$(printf "%s" "$spinner" | cut -c "$i")
			printf "\rScanning %c" "$char"
			sleep 0.1
		done
	done

	# Clear the line that printed the spinning wheel.
	printf "\r\033[K"
}

# MAIN PROCEDURE ---------------------------------------------------------------

# Initiate a Wi-Fi scan.
wpa_cli scan > /dev/null &

# Get the PID of "wpa_cli scan".
WPA_CLI_PID=$!

# Wait for the scanning process to complete.
while kill -0 "$WPA_CLI_PID" 2>/dev/null; do
	# Show animation for short bursts to check process status.
	show_spinning_wheel 1
done

# Ensure the animation shows for at least two more seconds after the process
# ends.
show_spinning_wheel 2

# Print the networks that were found.
# For each row returned, format it by printing signal strength and network name.
printf "Available WiFi networks:\n\n"
wpa_cli scan_results | \
awk 'BEGIN{OFS=","} NR > 2 {
	signal = $3; # Signal strength in dBm.
	ssid = $NF;  # Capture the last field as SSID.

	# Skip SSIDs that start with '['.
	if (substr(ssid, 1, 1) == "[") next;

	print signal, ssid
}' | \
sort -k1,1nr | \
while IFS=',' read -r signal ssid; do
	percent=$(convert_dbm_to_percent "$signal")
	printf "%3d%% | %s\n" "$percent" "$ssid"
done
printf "\n"
